#' @param letter_probs a vector of probabilities for each of the 26 letters (optional)
#' @param wreplacement if you want multiple letters, logical TRUE/FALSE for sampling with replacement
#' @import
#' @return a random letter based on probabilities
#' @export
#' @examples
#' randomLetter(1) #selecct 1 random letter
#' randomLetter(2) #select 2 random letters
#'
#'
randomLetter = function(n, prob = rep(1/26,26), wreplacement){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter(2)
library(roxygen2)
document()
library(devtools)
library(devtools)
document()
library(roxygen2)
library(devtools)
document()
randomLetter = function(n, prob = rep(1/26,26), wreplacement = FALSE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter = function(n, prob = rep(1/26,26), wreplacement = FALSE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter = function(n, prob = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter = function(n, prob = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, prob=letter_probs, replace = wreplacement)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter = function(n, prob = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement,prob=letter_probs,)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter = function(n, prob = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
document()
randomLetter(15)
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter(15)
library(roxygen2)
library(devtools)
document()
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter(15)
library(roxygen2)
library(devtools)
document()
library(roxygen2)
library(devtools)
document()
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter(15)
library(roxygen2)
library(devtools)
document()
library(devtools)
#' Random Letter Generator
#' @param n number of desired random letters
#' @param letter_probs a vector of probabilities for each of the 26 letters (optional)
#' @param wreplacement if you want multiple letters, logical TRUE/FALSE for sampling with replacement
#' @return a random letter based on probabilities
#' @export
#' @examples
#' randomLetter(1) #selecct 1 random letter
#' randomLetter(2) #select 2 random letters
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter(15)
library(roxygen2)
library(devtools)
document()
#' Random Letter Generator
#' @param n number of desired random letters
#' @param letter_probs a vector of probabilities for each of the 26 letters (optional)
#' @param wreplacement if you want multiple letters, logical TRUE/FALSE for sampling with replacement
#' @return a random letter based on probabilities
#' @export
#' @examples
#' randomLetter(1) #selecct 1 random letter
#' randomLetter(2) #select 2 random letters
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
randomLetter(2)
randomLetter(15)
library(roxygen2)
library(devtools)
document()
randomLetter = function(n, letter_probs = rep(1/26,26), wreplacement = TRUE){
iter = sample(26, n, replace = wreplacement, prob=letter_probs)
letter_selection = letters[iter]
return(letter_selection)
}
document()
library(devtools)
document()
library(nateUtils)
document()
library(devtools)
library(roxygen2)
document()
randomLetter(4)
library(NateUtils)
library(NateUtils)
pi.object <- function(df){
content <- "content"
qj <- "\""
space <- " "
comma <- ","
sqj <- "\'"
capture.output(as.character(
cat("{"),
#cat("\n"),
cat(qj,"contentItems", qj , ":", " [", sep = ""),
for(i in 1:nrow(df)){
if(i !=1){
cat(",")
}
cat("{")
#cat("\n")
cat(qj,content,qj,": ", qj, as.character(df$clean.emoji.text[i]), qj, comma, sep = "")
#cat("\n")
cat(qj, "contenttype", qj, ":", space, qj, "text/plain", qj, comma, sep = "")
#cat("\n")
cat(qj, "created", qj, ": ", df$created_at[i], comma, sep = "" )
#cat("\n")
cat(qj, "id", qj, ": ",qj, df$user_id[i], qj, comma, sep = "")
#cat("\n")
cat(qj, "language", qj, ": ", qj, df$lang[i], qj, sep = "")
#cat("\n")
cat("}")
},
cat("]}"),
cat(sqj),
cat(")")
))
}
library(devtools)
library(roxygen2)
document()
library(NateUtils)
document()
document()
document()
rm("pi.object")
document()
